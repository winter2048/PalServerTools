@page "/backup"

<PageTitle>备份</PageTitle>

@using System.IO
@using PalServerTools.Data
@using PalServerTools.Models
@using System.ComponentModel
@using AntDesign.TableModels

@inject IJSRuntime JS
@inject BackupService backupService

<h1>存档</h1>

<div class="bd-example">
    <div class="row row-cols-lg-auto g-3 align-items-center">
        <div class="col-12">
            <RangePicker TValue="DateTime?[]" ShowTime='@("HH:mm")' OnChange="OnRangeChange" Value="dateTimes" />

            <Button Type="@ButtonType.Primary" Size="@ButtonSize.Default" OnClick="Search">查询</Button>
            <Button Type="@ButtonType.Primary" Size="@ButtonSize.Default" OnClick="Refresh">刷新</Button>
            <Button Type="@ButtonType.Primary" Size="@ButtonSize.Default" OnClick="CurrentBackup">备份</Button>
        </div>
    </div>
</div>
<br />
@if (backupList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Table @ref="table"
       TItem="BackupModel"
       DataSource="@backupList"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="selectedRows"
       OnChange="OnChange"
       Size="TableSize.Default"
       RowKey="x=>x.Name">
        <Selection Key="@(context.Name)" />
        <PropertyColumn Property="c=>c.Name" Sortable Title="名称" />
        <PropertyColumn Property="c=>c.Size" Sortable Title="大小(k)" />
        <PropertyColumn Property='c=>c.CreateTime.ToString("yyyy/MM/dd HH:mm:ss")' Sortable Title="时间" />
        <ActionColumn Title="操作">
            <Space>
                <SpaceItem><Button OnClick="()=>DownloadBackup(context.Name)">下载</Button></SpaceItem>
                <SpaceItem><Button Danger OnClick="()=>DelBackup(context.Name)">删除</Button></SpaceItem>
            </Space>
        </ActionColumn>
    </Table>
}

@code {
    private List<BackupModel> backupList = null;
    private DateTime?[] dateTimes;

    IEnumerable<BackupModel> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;

    protected override void OnInitialized()
    {
        backupList = backupService.GetBackupList();
    }

    public async Task OnChange(QueryModel<BackupModel> queryModel)
    {
        //Console.WriteLine(JsonSerializer.Serialize(queryModel));
    }

    private void OnRangeChange(DateRangeChangedEventArgs<DateTime?[]> args)
    {
        dateTimes = args.Dates;
    }

    private async Task DownloadBackup(string name)
    {
        var fileStream = backupService.GetBackupStream(name);

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", name, streamRef);
    }

    private void CurrentBackup()
    {
        backupService.Backup();
        Refresh();
    }

    private void DelBackup(string name)
    {
        backupService.DelBackup(name);
        Refresh();
    }

    private void Refresh()
    {
        dateTimes = null;
        Search();
    }

    private void Search()
    {
        backupList = null;
        backupList = backupService.GetBackupList();
        if (dateTimes != null && dateTimes.Length == 2)
        {
            backupList = backupList.Where(p => p.CreateTime >= dateTimes[0]).ToList();
            backupList = backupList.Where(p => p.CreateTime <= dateTimes[1]).ToList();

        }
        _total = backupList.Count;
    }
}
