@page "/backup"

<PageTitle>备份</PageTitle>

@using System.IO
@using PalServerTools.Data
@using PalServerTools.Models;

@inject IJSRuntime JS
@inject BackupService backupService

<h1>存档</h1>

<div class="bd-example">
    <div class="row row-cols-lg-auto g-3 align-items-center">
        <div class="col-12">
            <label class="visually-hidden" for="inlineFormInputGroupUsername">Username</label>
            <div class="input-group input-group-sm">
                <div class="input-group-text">日期</div>
                <input type="datetime-local" class="form-control" id="inlineFormInputGroupUsername" @bind="StartTime">
                <span class="input-group-text">-</span>
                <input type="datetime-local" class="form-control" id="inlineFormInputGroupUsername" @bind="EndTime">
            </div>
        </div>

        <div class="col-12">
            <button class="btn btn-primary btn-sm" @onclick="Search">查询</button>
            <button class="btn btn-primary btn-sm" @onclick="Refresh">刷新</button>
            <button class="btn btn-primary btn-sm" @onclick="CurrentBackup">备份</button>
        </div>
    </div>
</div>
@if (backupList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>名称</th>
                <th>大小</th>
                <th>时间</th>
                <th>操作</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in backupList)
            {
                <tr>
                    <td>@file.Name</td>
                    <td>@file.Size</td>
                    <td>@file.CreateTime.ToString("yyyy/MM/dd HH:mm:ss")</td>
                    <td>
                        <button type="button" class="btn btn-primary btn-sm" @onclick="()=>DownloadBackup(file.Name)">下载</button>
                        <button type="button" class="btn btn-danger btn-sm" @onclick="()=>DelBackup(file.Name)">删除</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<BackupModel> backupList = null;
    private DateTime? StartTime = null;
    private DateTime? EndTime = null;

    protected override void OnInitialized()
    {
        backupList = backupService.GetBackupList();
    }

    private async Task DownloadBackup(string name)
    {
        var fileStream = backupService.GetBackupStream(name);

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", name, streamRef);
    }

    private void CurrentBackup()
    {
        backupService.Backup();
        Refresh();
    }

    private void DelBackup(string name)
    {
        backupService.DelBackup(name);
        Refresh();
    }

    private void Refresh()
    {
        StartTime = null;
        EndTime = null;
        Search();
    }

    private void Search()
    {
        backupList = null;
        backupList = backupService.GetBackupList();
        if (StartTime != null)
        {
            backupList = backupList.Where(p => p.CreateTime >= StartTime).ToList();
        }
        if (EndTime != null)
        {
            backupList = backupList.Where(p => p.CreateTime <= EndTime).ToList();
        }
    }
}
