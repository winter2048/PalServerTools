@page "/backup"

<PageTitle>备份</PageTitle>

@using System.IO
@using PalServerTools.Data
@using PalServerTools.Models
@using System.ComponentModel
@using AntDesign.TableModels

@inject IJSRuntime JS
@inject IMessageService message
@inject ModalService _modalService
@inject BackupService backupService

<Flex Vertical="true" Class="sy-content">
    <PageHeader Class="sy-content-title" Title="备份" Subtitle="Pal Server Tools" />
    <Content Class="sy-content-body">
        <div class="sy-content-body-search">
            <RangePicker TValue="DateTime?[]" ShowTime='@("HH:mm")' OnChange="OnRangeChange" Value="dateTimes" />

            <Button Type="@ButtonType.Primary" Size="@ButtonSize.Default" Icon="search" OnClick="Search">查询</Button>
            <Button Type="@ButtonType.Primary" Size="@ButtonSize.Default" Icon="reload" OnClick="Refresh" Loading="withRefreshLoading">刷新</Button>
            <Button Type="@ButtonType.Primary" Size="@ButtonSize.Default" Icon="snippets" OnClick="CurrentBackup" Loading="withBackupLoading">备份</Button>
        </div>
        @if (backupList == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <Table @ref="table"
                   TItem="BackupModel"
                   DataSource="@backupList"
                   Total="_total"
                   @bind-PageIndex="_pageIndex"
                   @bind-PageSize="_pageSize"
                   @bind-SelectedRows="selectedRows"
                   OnChange="OnChange"
                   Size="TableSize.Default"
                   ScrollY="1"
                   RowKey="x=>x.Name"
                   Class="sy-table-max"
                   Responsive>
             <Selection Key="@(context.Name)" />
             <PropertyColumn Property="c=>c.Name" Sortable Title="名称" />
                 <PropertyColumn Property="c=>c.Size" Sortable Title="大小(k)" />
                 <PropertyColumn Property='c=>c.CreateTime.ToString("yyyy/MM/dd HH:mm:ss")' Sortable Title="时间" />
                 <ActionColumn Title="操作">
                     <Space>
                         <SpaceItem><Button Icon="download" Type="@ButtonType.Primary" Shape="@ButtonShape.Round" OnClick="()=>DownloadBackup(context.Name)">下载</Button></SpaceItem>
                        <SpaceItem><Button Icon="history" Type="@ButtonType.Primary" Shape="@ButtonShape.Round" OnClick="()=>ShowRestoreBackupConfirm(context.Name)">恢复</Button></SpaceItem>
                         <SpaceItem><Button Icon="delete" Type="@ButtonType.Primary" Danger Shape="@ButtonShape.Round" OnClick="()=>DelBackup(context.Name)">删除</Button></SpaceItem>
                     </Space>
                 </ActionColumn>
             </Table>
        }
    </Content>
</Flex>



@code {
    private List<BackupModel> backupList = null;
    private DateTime?[] dateTimes;
    private bool withBackupLoading = false;
    private bool withRefreshLoading = false;

    IEnumerable<BackupModel> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;

    protected override void OnInitialized()
    {
        backupList = backupService.GetBackupList();
    }

    public void OnChange(QueryModel<BackupModel> queryModel)
    {
        //Console.WriteLine(JsonSerializer.Serialize(queryModel));
    }

    private void OnRangeChange(DateRangeChangedEventArgs<DateTime?[]> args)
    {
        dateTimes = args.Dates;
    }

    private async Task DownloadBackup(string name)
    {
        var fileStream = backupService.GetBackupStream(name);

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", name, streamRef);
    }

    private void ShowRestoreBackupConfirm(string name)
    {
        RenderFragment icon =@<Icon Type="exclamation-circle" Theme="outline"></Icon>;

        _modalService.Confirm(new ConfirmOptions()
            {
                Title = "确认恢复此存档?",
                Icon = icon,
                Content = "注意：该操作会覆盖当前存档，请谨慎操作，建议先对当前存档进行备份操作。",
                OnOk = async (e) => { await RestoreBackup(name); },
                OkText = "确认",
                CancelText = "取消"
            });
    }

    private async Task RestoreBackup(string name)
    {
        try
        {
            await backupService.RestoreBackup(name);
            _ = message.Success("存档恢复成功！");
            Refresh();
        }
        catch (Exception ex)
        {
            _ = message.Error(ex.Message);
        }
    }

    private async Task CurrentBackup()
    {
        try
        {
            withBackupLoading = true;
            await backupService.Backup();
            _ = message.Success("备份成功！");
            Refresh();
        }
        catch (Exception ex)
        {
            _ = message.Error(ex.Message);
        }
        finally
        {
            withBackupLoading = false;
        }
    }

    private void DelBackup(string name)
    {
        try
        {
            backupService.DelBackup(name);
            _ = message.Success("删除成功！");
            Refresh();
        }
        catch (Exception ex)
        {
            _ = message.Error(ex.Message);
        }
    }

    private void Refresh()
    {
        withRefreshLoading = true;
        dateTimes = null;
        Search();
        withRefreshLoading = false;
    }

    private void Search()
    {
        backupList = null;
        backupList = backupService.GetBackupList();
        if (dateTimes != null && dateTimes.Length == 2)
        {
            backupList = backupList.Where(p => p.CreateTime >= dateTimes[0]).ToList();
            backupList = backupList.Where(p => p.CreateTime <= dateTimes[1]).ToList();

        }
        _total = backupList.Count;
    }
}
