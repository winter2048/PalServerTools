@page "/"

<PageTitle>监控</PageTitle>

@using PalServerTools.Data
@using PalServerTools.Utils;
@inject ConsoleService consoleService
@inject PalRconService palRconService
@inject PalProcessService palProcessService
@inject PalConfigService configService
@inject IMessageService message

<Flex Vertical="true" Class="sy-content">
    <PageHeader Class="sy-content-title" Title="监控" Subtitle="Pal Server Tools" />
    <div class="sy-content-body sy-card">
        <Card Title="服务器信息" Class="sy-card-item">
            <Body>
                <p>
                    名称：@configService.PalConfig.ServerName
                </p>
                <p>版本： @palProcessService.currentVersion  
                    @if (!palProcessService.isLatestVersion)
                    {
                        <div style="display:inline-block;">
                            <Text Style="color: red; margin-left:10px;">新 @palProcessService.latestVersion</Text>
                            <Button Type="@ButtonType.Primary" Size="small" Danger Icon="arrow-up" OnClick="OnClickUpgrade" Loading="@(palProcessService.palServerUpdateState == Models.PalEnum.PalServerUpdateState.Updating)">@(palProcessService.palServerUpdateState == Models.PalEnum.PalServerUpdateState.Updating ? "升级中" : "立即升级")</Button>
                        </div>
                    }
                </p>
                <p>
                    状态： @(palProcessService.palServerState == Models.PalEnum.PalServerState.Stopped ? "停止" : "运行中")
                    <Button Type="@ButtonType.Primary" Size="small" Icon="reload" OnClick="OnClickReload">重启</Button>
                    @if (palProcessService.palServerState == Models.PalEnum.PalServerState.Stopped)
                    {
                        <Button Type="@ButtonType.Primary" Size="small" Icon="poweroff" OnClick="OnClickStart">开机</Button>
                    }
                    else
                    {
                        <Button Type="@ButtonType.Primary" Danger Icon="poweroff" Size="small" OnClick="OnClickClose">关机</Button>
                    }
                </p>
                <p>
                    自动重启：<Switch Size="small" @bind-Checked="configService.ToolsConfig.AutoRestart" OnChange="OnChangeToolsConfig" />
                </p>
                <p>
                    自动更新：<Switch Size="small" @bind-Checked="configService.ToolsConfig.AutoUpgrade" OnChange="OnChangeToolsConfig" />
                </p>
            </Body>
        </Card>
        <br />
        <SystemMonitor></SystemMonitor>
    </div>
</Flex>

@code {
    Timer timer;
    private string serverInfo = "";

    protected override async Task OnInitializedAsync()
    {
        timer = new Timer(UpdateStateInfo, null, TimeSpan.Zero, TimeSpan.FromSeconds(2));
        if (palProcessService.palServerState == Models.PalEnum.PalServerState.Running)
        {
            serverInfo = await palRconService.Info();
        }
    }

    private void UpdateStateInfo(object state)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    async Task OnClickStart()
    {
        palProcessService.StartProcess();
        this.StateHasChanged();
    }

    async Task OnClickClose()
    {
        palProcessService.CloseProcess();
        this.StateHasChanged();
    }

    async Task OnClickReload()
    {
        palProcessService.CloseProcess();
        this.StateHasChanged();
        palProcessService.StartProcess();
        this.StateHasChanged();
    }

    async Task OnChangeToolsConfig()
    {
        configService.ToolsConfigSave();
    }

    async Task OnClickUpgrade()
    {
        try
        {
          await palProcessService.Upgrade();
            _ = message.Success("升级成功！");
        }
        catch (Exception ex)
        {
            _ = message.Error(ex.Message, 10);
        }
        this.StateHasChanged();
    }
}