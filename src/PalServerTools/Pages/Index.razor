@page "/"

<PageTitle>监控</PageTitle>

@using Newtonsoft.Json;
@using PalServerTools.Data
@using PalServerTools.Utils;
@using System.Diagnostics;
@using System.Reflection;
@inject ConsoleService consoleService
@inject PalRconService palRconService
@inject PalProcessService palProcessService
@inject PalConfigService configService
@inject IHostApplicationLifetime lifetime
@inject IMessageService message

<Flex Vertical="true" Class="sy-content">
    <PageHeader Class="sy-content-title" Title="监控" Subtitle="Pal Server Tools" />
    <div class="sy-content-body sy-card">
        <Card Title="服务器信息" Class="sy-card-item">
            <Body>
                <p>
                    名称：@configService.PalConfig.ServerName
                </p>
                <p>
                    版本： @palProcessService.currentVersion
                    @if (!palProcessService.isLatestVersion)
                    {
                        <div style="display:inline-block;margin-left:10px;">
                            <Text Style="color: red; ">新 @palProcessService.latestVersion</Text>
                            <Button Type="@ButtonType.Primary" Size="small" Danger Icon="arrow-up" OnClick="OnClickUpgrade" Loading="@(palProcessService.palServerUpdateState == Models.PalEnum.PalServerUpdateState.Updating)">@(palProcessService.palServerUpdateState == Models.PalEnum.PalServerUpdateState.Updating ? "升级中" : "立即升级")</Button>
                         </div>
                    }
                    else
                    {
                        <div style="display:inline-block;margin-left:10px;">
                            <Button Type="@ButtonType.Primary" Size="small" Icon="cloud-sync" OnClick="OnClickCheckLatestVersion" Loading="withCheckLatestVersionLoading">检查版本</Button>
                         </div>
                    }
                </p>
                <p>
                    状态： @(palProcessService.palServerState == Models.PalEnum.PalServerState.Stopped ? "停止" : "运行中")
                    @if (palProcessService.palServerState == Models.PalEnum.PalServerState.Stopped)
                    {
                        <Button Type="@ButtonType.Primary" Size="small" Icon="poweroff" OnClick="OnClickStart" Loading="withStartLoading">启动</Button>
                    }
                    else
                    {
                        <Button Type="@ButtonType.Primary" Danger Icon="poweroff" Size="small" OnClick="OnClickClose" Loading="withCloseLoading">关闭</Button>
                        <Button Type="@ButtonType.Primary" Size="small" Icon="reload" OnClick="OnClickReload" Loading="withReloadLoading">重启</Button>
                    }
                </p>
                <p>
                    自动重启：<Switch Size="small" @bind-Checked="configService.ToolsConfig.AutoRestart" OnChange="OnChangeToolsConfig" />
                </p>
                <p>
                    自动更新：<Switch Size="small" @bind-Checked="configService.ToolsConfig.AutoUpgrade" OnChange="OnChangeToolsConfig" />
                </p>
            </Body>
        </Card>
        <br />
        <SystemMonitor></SystemMonitor>
    </div>
    @if (!File.Exists(Path.Combine(configService.ToolsConfig.PalServerPath, "PalServer.exe")))
    {
        <Alert Type="@AlertType.Error" ShowIcon="true">
            <MessageTemplate> PalServer根目录未配置！<NavLink href="/config#basic">去配置</NavLink></MessageTemplate>
        </Alert>
    }
    @if (!configService.PalConfig.RCONEnabled)
    {
        <Alert Type="@AlertType.Warning" ShowIcon="true">
            <MessageTemplate> RCON未启用！<NavLink href="/config#service">去开启</NavLink></MessageTemplate>
        </Alert>
    }
    @if (!SteamCmdUtil.HasSteamCMD())
    {
        <Alert Type="@AlertType.Warning" ShowIcon="true">
            <MessageTemplate> SteamCMD未添加到系统环境变量PATH中！<a target="_blank" href="https://www.leyongdm.com/213440.html">帮助</a></MessageTemplate>
        </Alert>
    }

    @if (!isToolsLatestVersion.Item1)
    {
        <Alert Type="@AlertType.Warning" ShowIcon="true">
            <MessageTemplate>
                PalServerTools 发现新版本 <a target="_blank" href="https://github.com/winter2048/PalServerTools/releases/tag/@(isToolsLatestVersion.Item2)">@(isToolsLatestVersion.Item2)</a> ！
                <Tooltip Placement="@Placement.Right" Title="提示：更新过程中页面会未响应，请耐心等待。如果长时间未响应请尝试刷新页面！">
                    <Button Type="@ButtonType.Primary" Size="small" OnClick="UpdateTools">
                        立即更新
                    </Button>
                </Tooltip>
            </MessageTemplate>
        </Alert>
    }
</Flex>

@code {
    Timer? timer;
    private string serverInfo = "";
    private bool withCheckLatestVersionLoading = false;
    private bool withReloadLoading = false;
    private bool withStartLoading = false;
    private bool withCloseLoading = false;
    private bool isCanConnect = true;
    private Tuple<bool, string> isToolsLatestVersion = new Tuple<bool, string>(true, "");

    protected override async Task OnInitializedAsync()
    {
        if (palProcessService.palServerState == Models.PalEnum.PalServerState.Running)
        {
            serverInfo = await palRconService.Info();
        }
        isCanConnect = await palRconService.IsCanConnect();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            timer = new Timer(UpdateStateInfo, null, TimeSpan.Zero, TimeSpan.FromSeconds(2));
            await CheckLatestVersion();
            isToolsLatestVersion = await GetToolsVersion();
        }
    }

    async Task<Tuple<bool, string>> GetToolsVersion()
    {
        bool isLatestVersion = true;
        string latestVersion = Assembly.GetEntryAssembly().GetName().Version.ToString();
        latestVersion = latestVersion.Substring(0, latestVersion.LastIndexOf('.'));
        string currentVersion = "v" + latestVersion;

        try
        {
            string apiUrl = "https://api.github.com/repos/winter2048/PalServerTools/releases/latest";
            using (HttpClient client = new HttpClient())
            {
                client.DefaultRequestHeaders.Add("User-Agent", "Mozilla/5.0");
                HttpResponseMessage response = await client.GetAsync(apiUrl);

                if (response.IsSuccessStatusCode)
                {
                    string json = response.Content.ReadAsStringAsync().Result;
                    dynamic data = JsonConvert.DeserializeObject(json);
                    latestVersion = data.tag_name;
                }
            }
        }
        catch
        {
            
        }

        return new Tuple<bool, string>(currentVersion == latestVersion, latestVersion);
    }

    async Task CheckLatestVersion()
    {
        try
        {
            await palProcessService.CheckLatestVersion();
        }
        catch (Exception ex)
        {
            _ = message.Error(ex.Message);
        }
    }

    private void UpdateStateInfo(object? state)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    async Task OnClickStart()
    {
        try
        {
            withStartLoading = true;
            await palProcessService.StartProcess();
            _ = message.Success("启动成功！");
        }
        catch (Exception ex)
        {
            _ = message.Error(ex.Message);
        }
        finally
        {
            withStartLoading = false; 
            await CheckLatestVersion();
        }
        this.StateHasChanged();
    }

    async Task OnClickClose()
    {
        try
        {
            withCloseLoading = true;
            await palProcessService.CloseProcess();
            _ = message.Success("关闭成功！");
        }
        catch (Exception ex)
        {
            _ = message.Error(ex.Message);
        }
        finally
        {
            withCloseLoading = false;
        }
        this.StateHasChanged();
    }

    async Task OnClickReload()
    {
        try
        {
            withReloadLoading = true;
            await palProcessService.CloseProcess();
            await palProcessService.StartProcess();
            _ = message.Success("重启成功！");
        }
        catch (Exception ex)
        {
            _ = message.Error(ex.Message);
        }
        finally
        {
            withReloadLoading = false;
            await CheckLatestVersion();
        }
    }

    async Task OnChangeToolsConfig()
    {
        await configService.ToolsConfigSave();
    }

    async Task OnClickUpgrade()
    {
        try
        {
            await palProcessService.Upgrade();
            _ = message.Success("升级成功！");
        }
        catch (Exception ex)
        {
            _ = message.Error(ex.Message, 10);
        }
        this.StateHasChanged();
    }

    async Task OnClickCheckLatestVersion()
    {
        try
        {
            withCheckLatestVersionLoading = true;
            if (palProcessService.palServerState == Models.PalEnum.PalServerState.Running)
            {
                await palProcessService.CheckLatestVersion();
                _ = message.Success(palProcessService.isLatestVersion ? "已经是最新版本！" : "发现新版本！");
            }
            else
            {
                _ = message.Error("服务器未运行！");
            }
        }
        catch (Exception ex)
        {
            _ = message.Error(ex.Message, 10);
        }
        finally
        {
            withCheckLatestVersionLoading = false;
        }
    }

    void UpdateTools()
    {
        ProcessStartInfo psi = new ProcessStartInfo
            {
                FileName = "powershell",
                Arguments = "./update.ps1",
                RedirectStandardOutput = true,
                UseShellExecute = false,
                CreateNoWindow = true,
                WorkingDirectory = AppContext.BaseDirectory
            };

        Process process = Process.Start(psi);

        lifetime.StopApplication();
    }
}