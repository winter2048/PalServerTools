@page "/"

<PageTitle>监控</PageTitle>

@using Newtonsoft.Json;
@using PalServerTools.Data
@using PalServerTools.Utils;
@using System.Diagnostics;
@using System.Reflection;
@using PalServerTools.Models;
@inject ConsoleService consoleService
@inject PalApiService palApiService
@inject PalProcessService palProcessService
@inject PalConfigService configService
@inject IHostApplicationLifetime lifetime
@inject IMessageService message

<Flex Vertical="true" Class="sy-content">
    <PageHeader Class="sy-content-title" Title="监控" Subtitle="Pal Server Tools" />
    <div class="sy-content-body sy-card">
        <Card Title="服务器信息" Class="sy-card-item">
            <Body>
                <p>
                    名称：@configService.PalConfig.ServerName
                </p>
                <p>
                    版本： @palProcessService.currentVersion
                    @if (!palProcessService.isLatestVersion)
                    {
                        <div style="display:inline-block;margin-left:10px;">
                            <Text Style="color: red; ">新 @palProcessService.latestVersion</Text>
                            <Button Type="@ButtonType.Primary" Size="small" Danger Icon="arrow-up" OnClick="OnClickUpgrade" Loading="@(palProcessService.palServerUpdateState == Models.PalServerUpdateState.Updating)">@(palProcessService.palServerUpdateState == Models.PalServerUpdateState.Updating ? "升级中" : "立即升级")</Button>
                         </div>
                    }
                    else
                    {
                        <div style="display:inline-block;margin-left:10px;">
                            <Button Type="@ButtonType.Primary" Size="small" Icon="cloud-sync" OnClick="OnClickCheckLatestVersion" Loading="withCheckLatestVersionLoading">检查版本</Button>
                         </div>
                    }
                </p>
                <p>
                    状态： @(palProcessService.palServerState == Models.PalServerState.Stopped ? "停止" : "运行中")
                    @if (palProcessService.palServerState == Models.PalServerState.Stopped)
                    {
                        <Button Type="@ButtonType.Primary" Size="small" Icon="poweroff" OnClick="OnClickStart" Loading="withStartLoading">启动</Button>
                    }
                    else
                    {
                        <Button Type="@ButtonType.Primary" Danger Icon="poweroff" Size="small" OnClick="OnClickClose" Loading="withCloseLoading">关闭</Button>
                        <Button Type="@ButtonType.Primary" Size="small" Icon="reload" OnClick="OnClickReload" Loading="withReloadLoading">重启</Button>
                    }
                </p>
                <p>
                    自动重启：<Switch Size="small" @bind-Checked="autoRestart" OnChange="OnChangeToolsConfig" />
                </p>
                <p>
                    自动更新：<Switch Size="small" @bind-Checked="autoUpgrade" OnChange="OnChangeToolsConfig" />
                </p>
            </Body>
        </Card>
        <br />
        <SystemMonitor></SystemMonitor>
    </div>

    <InputGroup Compact Style="margin-bottom: 10px;"> 
        <Tag Color="default" Style="width: 120px;text-align: center;line-height: 30px;font-size: 14px;">服务器消息</Tag>
        <Input DefaultValue="@("")" Style="width: 100%;" Placeholder="输入消息..." @bind-Value="sendMsg" />
        <Button Type="@ButtonType.Primary" OnClick="OnClickSendMsg" Loading="withSendMsgLoading">
            发送
        </Button>
    </InputGroup>

    @if (!File.Exists(Path.Combine(configService.ToolsConfig.PalServerPath, "PalServer.exe")) && palProcessService.palServerUpdateState != Models.PalServerUpdateState.Updating)
    {
        <Alert Type="@AlertType.Error" ShowIcon="true">
            <MessageTemplate> PalServer根目录未配置！<NavLink href="/config#basic">去配置</NavLink></MessageTemplate>
        </Alert>
    }
    @if (!configService.PalConfig.RESTAPIEnabled)
    {
        <Alert Type="@AlertType.Warning" ShowIcon="true">
            <MessageTemplate> Rest Api未启用！<NavLink href="/config#service">去开启</NavLink></MessageTemplate>
        </Alert>
    }
    @if (!SteamCmdUtil.HasSteamCMD())
    {
        <Alert Type="@AlertType.Warning" ShowIcon="true">
            <MessageTemplate> SteamCMD未安装！请配置SteamCMD的路径或将其添加到系统的环境变量PATH中！<a target="_blank" href="https://www.leyongdm.com/213440.html">帮助</a> <NavLink style="margin-left: 8px" href="/config#basic">去配置</NavLink></MessageTemplate>
        </Alert>
    }

    @if (PalSavUtil.installState != Models.InstallState.Installed)
    {
        <Alert Type="@AlertType.Warning" ShowIcon="true">
            <MessageTemplate>
                PalWorld Sav解析器（palworld-save-tools）@(PalSavUtil.installState == Models.InstallState.Failed ? "安装失败" : "未安装")！
                <Button Type="@ButtonType.Primary" Size="small" Loading="@(PalSavUtil.installState == Models.InstallState.Installing)" OnClick="OnClickInstallPalSav">
                    安装
                </Button>
            </MessageTemplate>
        </Alert>
    }

    @if (!isToolsLatestVersion.Item1)
    {
        <Alert Type="@AlertType.Warning" ShowIcon="true">
            <MessageTemplate>
                PalServerTools 发现新版本 <a target="_blank" href="https://github.com/winter2048/PalServerTools/releases/tag/@(isToolsLatestVersion.Item2)">@(isToolsLatestVersion.Item2)</a> ！
                <pre style="margin: 5px 0px;">@isToolsLatestVersion.Item3</pre>
                <Tooltip Placement="@Placement.Right" Title="提示：更新过程中页面会未响应，请耐心等待。如果长时间未响应请尝试刷新页面！">
                    <Button Type="@ButtonType.Primary" Size="small" OnClick="UpdateTools">
                        立即更新
                    </Button>
                </Tooltip>
            </MessageTemplate>
        </Alert>
    }
</Flex>

@code {
    Timer? timer;
    private ServerInfoModel serverInfo = new ServerInfoModel();
    private bool withCheckLatestVersionLoading = false;
    private bool withReloadLoading = false;
    private bool withStartLoading = false;
    private bool withCloseLoading = false;
    private bool withSendMsgLoading = false;
    private bool isCanConnect = true;
    private Tuple<bool, string, string> isToolsLatestVersion = new Tuple<bool, string, string>(true, "", "");
    private bool autoRestart = false;
    private bool autoUpgrade = false;
    private string sendMsg = "";

    protected override async Task OnInitializedAsync()
    {
        autoRestart = configService.ToolsConfig.AutoRestart;
        autoUpgrade = configService.ToolsConfig.AutoUpgrade;
        if (palProcessService.palServerState == Models.PalServerState.Running)
        {
            serverInfo = await palApiService.Info();
        }
        isCanConnect = await palApiService.IsCanConnect();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            timer = new Timer(UpdateStateInfo, null, TimeSpan.Zero, TimeSpan.FromSeconds(2));
            await CheckLatestVersion();
            isToolsLatestVersion = await GetToolsVersion();
        }
    }

    async Task<Tuple<bool, string, string>> GetToolsVersion()
    {
        string latestVersion = Assembly.GetEntryAssembly().GetName().Version.ToString();
        latestVersion = "v" + latestVersion.Substring(0, latestVersion.LastIndexOf('.'));
        string currentVersion = latestVersion;
        string body = "";

        try
        {
            string apiUrl = "https://api.github.com/repos/winter2048/PalServerTools/releases/latest";
            using (HttpClient client = new HttpClient())
            {
                client.DefaultRequestHeaders.Add("User-Agent", "Mozilla/5.0");
                HttpResponseMessage response = await client.GetAsync(apiUrl);

                if (response.IsSuccessStatusCode)
                {
                    string json = response.Content.ReadAsStringAsync().Result;
                    dynamic data = JsonConvert.DeserializeObject(json);
                    latestVersion = data.tag_name;
                    body = data.body;
                    if (!string.IsNullOrWhiteSpace(body))
                    {
                        var updateText = new List<string>();
                        updateText.Add("更新内容：");
                        updateText.AddRange(body.Split("\r\n").Skip(1).Where(p => !string.IsNullOrWhiteSpace(p)));
                        body = string.Join("\r\n", updateText);
                    }
                }
            }
        }
        catch
        {

        }

        return new Tuple<bool, string, string>(currentVersion == latestVersion, latestVersion, body);
    }

    async Task CheckLatestVersion()
    {
        try
        {
            await palProcessService.CheckLatestVersion();
        }
        catch (Exception ex)
        {
            _ = message.Error(ex.Message);
        }
    }

    private void UpdateStateInfo(object? state)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    async Task OnClickStart()
    {
        try
        {
            withStartLoading = true;
            await palProcessService.StartProcess();
            _ = message.Success("启动成功！");
        }
        catch (Exception ex)
        {
            _ = message.Error(ex.Message);
        }
        finally
        {
            withStartLoading = false; 
            await CheckLatestVersion();
        }
        this.StateHasChanged();
    }

    async Task OnClickClose()
    {
        try
        {
            withCloseLoading = true;
            await palProcessService.CloseProcess();
            _ = message.Success("关闭成功！");
        }
        catch (Exception ex)
        {
            _ = message.Error(ex.Message);
        }
        finally
        {
            withCloseLoading = false;
        }
        this.StateHasChanged();
    }

    async Task OnClickReload()
    {
        try
        {
            withReloadLoading = true;
            await palProcessService.CloseProcess();
            await palProcessService.StartProcess();
            _ = message.Success("重启成功！");
        }
        catch (Exception ex)
        {
            _ = message.Error(ex.Message);
        }
        finally
        {
            withReloadLoading = false;
            await CheckLatestVersion();
        }
    }

    async Task OnClickSendMsg()
    {
        withSendMsgLoading = true;
        var isok = await palApiService.Broadcast(sendMsg);
        withSendMsgLoading = false;
        _ = isok ? message.Success("启动成功！") : message.Error("启动成功");
        this.StateHasChanged();
    }

    async Task OnChangeToolsConfig()
    {
        var toolsConfig = configService.ToolsConfig.DeepCopy();
        toolsConfig.AutoRestart = autoRestart;
        toolsConfig.AutoUpgrade = autoUpgrade;
        await configService.ToolsConfigSave(toolsConfig);
    }

    async Task OnClickUpgrade()
    {
        try
        {
            await palProcessService.Upgrade();
            _ = message.Success("升级成功！");
        }
        catch (Exception ex)
        {
            _ = message.Error(ex.Message, 10);
        }
        this.StateHasChanged();
    }

    async Task OnClickInstallPalSav()
    {
        try
        {
            await PalSavUtil.Install();
            _ = message.Success("PalWorld Sav解析器（palworld-save-tools）安装成功！");

            _ = message.Success("开始重启PalServerTools，请手动刷新页面！");
        }
        catch (Exception ex)
        {
            _ = message.Error("PalWorld Sav解析器（palworld-save-tools）安装失败：" + ex.Message, 10);
        }
        finally
        {
            this.StateHasChanged();
        }
    }

    async Task OnClickCheckLatestVersion()
    {
        try
        {
            withCheckLatestVersionLoading = true;
            if (palProcessService.palServerState == Models.PalServerState.Running)
            {
                await palProcessService.CheckLatestVersion();
                _ = message.Success(palProcessService.isLatestVersion ? "已经是最新版本！" : "发现新版本！");
            }
            else
            {
                _ = message.Error("服务器未运行！");
            }
        }
        catch (Exception ex)
        {
            _ = message.Error(ex.Message, 10);
        }
        finally
        {
            withCheckLatestVersionLoading = false;
        }
    }

    void UpdateTools()
    {
        ProcessStartInfo psi = new ProcessStartInfo
            {
                FileName = "powershell",
                Arguments = "./update.ps1",
                RedirectStandardOutput = true,
                UseShellExecute = false,
                CreateNoWindow = false,
                WorkingDirectory = AppContext.BaseDirectory
            };

        Process process = Process.Start(psi);
    }
}