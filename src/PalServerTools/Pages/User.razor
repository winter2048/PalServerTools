@page "/user"

<PageTitle>玩家</PageTitle>

@using AntDesign.TableModels;
@using PalServerTools.Data
@using PalServerTools.Models
@inject PalRconService palRconService
@inject NavigationManager nvm

<Flex Vertical="true" Class="sy-content">
    <PageHeader Class="sy-content-title" Title="玩家" Subtitle="@("当前在线人数(" + (players == null ? 0 : players.Count) + ")")" />
    <Content Class="sy-content-body">

        @if (!isCanConnect)
        {
            <Result Status="warning"
                Title="RCON连接失败！"
                SubTitle="提示：请先在 配置/服务器配置 页面启用RCON。如果已经完成配置，请尝试重启PalServer。">
                <Extra>
                    <Button Type="primary" OnClick="@(()=>{ nvm.NavigateTo("/config#service");})">去启用RCON</Button>
                </Extra>
            </Result>
        }
        else
        {
            <div class="sy-content-body-search">
                <Search Placeholder="输入名称" WrapperStyle="width: 200px;" ClassicSearchIcon Value="@keywords" />

                <Button Type="@ButtonType.Primary" Size="@ButtonSize.Default" Icon="search" OnClick="Search">查询</Button>
                <Button Type="@ButtonType.Primary" Size="@ButtonSize.Default" Icon="reload" OnClick="Refresh" Loading="withRefreshLoading">刷新</Button>
            </div>
            if (players == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <Table @ref="table"
               TItem="PlayerModel"
               DataSource="@players"
               Total="_total"
               @bind-PageIndex="_pageIndex"
               @bind-PageSize="_pageSize"
               @bind-SelectedRows="selectedRows"
               OnChange="OnChange"
               Size="TableSize.Default"
               ScrollY="1"
               RowKey="x=>x.Name"
               Class="sy-table-max"
               Responsive>
                    <Selection Key="@(context.PlayerUid)" />
                    <PropertyColumn Property="c=>c.PlayerUid" Sortable Title="Id" />
                    <PropertyColumn Property="c=>c.Name" Sortable Title="名称" />
                    <PropertyColumn Property='c=>c.SteamId' Sortable Title="SteamId" />
                    <ActionColumn Title="操作">
                        <Space>
                            <SpaceItem><Button Icon="download" Type="@ButtonType.Primary" Danger Shape="@ButtonShape.Round" OnClick="()=>palRconService.KickPlayer(context.SteamId)">踢出</Button></SpaceItem>
                            <SpaceItem><Button Icon="delete" Type="@ButtonType.Primary" Danger Shape="@ButtonShape.Round" OnClick="()=>palRconService.BanPlayer(context.SteamId)">封禁</Button></SpaceItem>
                        </Space>
                    </ActionColumn>
                </Table>
            }
        }
    </Content>
</Flex>




@code {
    private List<PlayerModel> players;
    private string keywords = "";
    private bool withRefreshLoading = false;
    private bool isCanConnect = true;

    IEnumerable<PlayerModel> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;

    protected override async Task OnInitializedAsync()
    {
        isCanConnect = await palRconService.IsCanConnect();
        await this.Refresh();
    }

    public void OnChange(QueryModel<PlayerModel> queryModel)
    {
        System.Console.WriteLine(queryModel.StartIndex);
    }

    private async Task Search()
    {
        players = null;
        var playersRes = await palRconService.ShowPlayers();
        players = new List<PlayerModel>();
        foreach (var player in playersRes.Split("\n").Skip(1))
        {
            if (!string.IsNullOrWhiteSpace(player))
            {
                var value = player.Split(",");
                players.Add(new PlayerModel()
                    {
                        Name = value.Length >= 1 ? value[0] : "",
                        PlayerUid = value.Length >= 2 ? value[1] : "",
                        SteamId = value.Length >= 3 ? value[2] : ""
                    });
            }
        }
        if (!string.IsNullOrWhiteSpace(keywords))
        {
            players = players.Where(p => p.Name.Contains(keywords) || p.PlayerUid.Contains(keywords) || p.SteamId.Contains(keywords)).ToList();
        }
    }

    public async Task Refresh()
    {
        withRefreshLoading = true;
        keywords = "";
        await Search();
        withRefreshLoading = false;
    }
}
